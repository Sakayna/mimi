import 'package:flutter/material.dart';
import 'package:ar_flutter_plugin/ar_flutter_plugin.dart';
import 'package:ar_flutter_plugin/datatypes/config_planedetection.dart';
import 'package:ar_flutter_plugin/managers/ar_anchor_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_object_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_session_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_location_manager.dart';
import 'package:ar_flutter_plugin/models/ar_node.dart';
import 'package:ar_flutter_plugin/datatypes/node_types.dart';
import 'package:ar_flutter_plugin/models/ar_hittest_result.dart';
import 'package:ar_flutter_plugin/datatypes/hittest_result_types.dart';
import 'package:vector_math/vector_math_64.dart' as vector;

void main() {
  runApp(MaterialApp(home: ModuleScreen()));
}

class SceneNode {
  final String name;
  final String modelPath;
  final vector.Vector3 position;
  final vector.Vector3 scale;

  SceneNode({
    required this.name,
    required this.modelPath,
    required this.position,
    required this.scale,
  });
}

class ModuleScreen extends StatefulWidget {
  @override
  _ModuleScreenPage createState() => _ModuleScreenPage();
}

class _ModuleScreenPage extends State<ModuleScreen> {
  ARSessionManager? arSessionManager;
  ARObjectManager? arObjectManager;
  ARAnchorManager? arAnchorManager;
  ARLocationManager? arLocationManager;
  bool surfaceDetected = false;
  bool modelPlaced = false;
  bool welcomeMessageShown = false;
  bool explorationMode = false;
  List<ARNode> nodes = [];
  int currentQuestionIndex = 0;

  List<String> questions = [
    "Which part is the base? Tap to answer.",
    "Which part is the arm? Tap to answer.",
    "Which part is the fine focus? Tap to answer.",
    "Which part is the coarse focus? Tap to answer.",
    "Which part is the eyepiece? Tap to answer.",
    "Which part is the diaphragm? Tap to answer.",
    "Which part is the stage? Tap to answer.",
    "Which part are the objective lenses? Tap to answer.",
    "Which part is the nosepiece? Tap to answer.",
  ];

  @override
  void dispose() {
    super.dispose();
    arSessionManager?.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: const Center(
          child: Text(
            'AR Surface Detection',
            style: TextStyle(color: Colors.black),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      body: Stack(
        children: [
          ARView(
            onARViewCreated: onARViewCreated,
            planeDetectionConfig: PlaneDetectionConfig.horizontalAndVertical,
          ),
          if (!welcomeMessageShown && modelPlaced)
            Positioned.fill(
              child: Container(
                color: Colors.black54,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          'Welcome to the AR Microscope Learning Module!',
                          style: TextStyle(
                            fontSize: 24,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 20),
                        Text(
                          'You will learn about the parts and functions of a microscope. Tap the screen to proceed to the questions.',
                          style: TextStyle(
                            fontSize: 18,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 20),
                        ElevatedButton(
                          onPressed: () {
                            setState(() {
                              welcomeMessageShown = true;
                            });
                          },
                          child: Text('Start'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          if (welcomeMessageShown && modelPlaced && !explorationMode)
            Positioned(
              bottom: 16,
              left: 16,
              right: 16,
              child: Container(
                color: Colors.black54,
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  questions[currentQuestionIndex],
                  style: TextStyle(
                    fontSize: 20,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          if (currentQuestionIndex == questions.length && !explorationMode)
            Positioned.fill(
              child: Container(
                color: Colors.black54,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          'Now you have learned about the parts and functions of the microscope. Feel free to explore them on your own.',
                          style: TextStyle(
                            fontSize: 18,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 20),
                        ElevatedButton(
                          onPressed: () {
                            setState(() {
                              explorationMode = true;
                            });
                          },
                          child: Text('Explore Now'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          if (explorationMode)
            Positioned(
              bottom: 16,
              left: 16,
              right: 16,
              child: Container(
                color: Colors.black.withOpacity(0.5),
                height: 150,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: 10,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Column(
                        children: [
                          Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              shape: BoxShape.circle,
                            ),
                            padding: const EdgeInsets.all(8.0),
                            child: Image.asset(
                              index == 0
                                  ? 'assets/lesson1&2/assets/base/base.png'
                                  : index == 1
                                      ? 'assets/lesson1&2/assets/fine/fine.png'
                                      : index == 2
                                          ? 'assets/lesson1&2/assets/coarse/coarse.png'
                                          : index == 3
                                              ? 'assets/lesson1&2/assets/arm/arm.png'
                                              : index == 4
                                                  ? 'assets/lesson1&2/assets/eye/eye.png'
                                                  : index == 5
                                                      ? 'assets/lesson1&2/assets/lamp/illuminator.png'
                                                      : index == 6
                                                          ? 'assets/lesson1&2/assets/diaphragm/diaphragm.png'
                                                          : index == 7
                                                              ? 'assets/lesson1&2/assets/stage/stage.png'
                                                              : index == 8
                                                                  ? 'assets/lesson1&2/assets/objective/objective.png'
                                                                  : 'assets/lesson1&2/assets/nose/nose.png',
                              height: 80,
                              width: 80,
                            ),
                          ),
                          SizedBox(height: 8),
                          Text(
                            index == 0
                                ? 'Base'
                                : index == 1
                                    ? 'Fine Focus'
                                    : index == 2
                                        ? 'Coarse Focus'
                                        : index == 3
                                            ? 'Arm'
                                            : index == 4
                                                ? 'Eyepiece'
                                                : index == 5
                                                    ? 'Illuminator'
                                                    : index == 6
                                                        ? 'Diaphragm'
                                                        : index == 7
                                                            ? 'Stage'
                                                            : index == 8
                                                                ? 'Objective Lenses'
                                                                : 'Nosepiece',
                            style: TextStyle(color: Colors.black),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
            ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                if (!surfaceDetected)
                  Column(
                    children: [
                      Icon(Icons.camera, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Scan the surface and tap to start',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                if (surfaceDetected && !modelPlaced)
                  Column(
                    children: [
                      Icon(Icons.touch_app, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Tap the screen to place the models',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void onARViewCreated(
    ARSessionManager arSessionManager,
    ARObjectManager arObjectManager,
    ARAnchorManager arAnchorManager,
    ARLocationManager arLocationManager,
  ) {
    this.arSessionManager = arSessionManager;
    this.arObjectManager = arObjectManager;
    this.arAnchorManager = arAnchorManager;
    this.arLocationManager = arLocationManager;

    this.arSessionManager!.onInitialize(
          showFeaturePoints: true,
          showPlanes: true,
          showWorldOrigin: false,
          handlePans: false, // Disable dragging
          handleScale: true, // Enable zooming
        );
    this.arObjectManager!.onInitialize();

    this.arSessionManager!.onPlaneOrPointTap =
        (List<ARHitTestResult> hitTestResults) {
      if (!surfaceDetected) {
        setState(() {
          surfaceDetected = true;
        });
      } else if (!modelPlaced) {
        ARHitTestResult? singleHitTestResult;
        try {
          singleHitTestResult = hitTestResults.firstWhere(
            (hitTestResult) => hitTestResult.type == ARHitTestResultType.plane,
          );
        } catch (e) {
          singleHitTestResult = null;
        }

        if (singleHitTestResult != null) {
          var translation = singleHitTestResult.worldTransform.getTranslation();
          var rotation = singleHitTestResult.worldTransform.getRotation();
          var rotationQuaternion = vector.Quaternion.fromRotation(rotation);

          List<SceneNode> sceneNodes = [
            SceneNode(
              name: "base",
              modelPath: "assets/hologram/base/base1.gltf",
              position: vector.Vector3(0.1, -0.0180516, 0.135067),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "arm",
              modelPath: "assets/hologram/arm/arm1.gltf",
              position: vector.Vector3(0.11, 0.0205984, 0.115067),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "fine",
              modelPath: "assets/hologram/fine/fine1.gltf",
              position: vector.Vector3(-0.07, 0.0283327, 0.1078705),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "coarse",
              modelPath: "assets/hologram/coarse/coarse1.gltf",
              position: vector.Vector3(0.03, 0.0704573, 0.085877),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "eye",
              modelPath: "assets/hologram/eyepiece/eye1.gltf",
              position: vector.Vector3(-0.03, 0.222, 0.16),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "diaphragm",
              modelPath: "assets/hologram/diaphragm/condenser1.gltf",
              position: vector.Vector3(-0.04, 0.092, 0.16),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "stage",
              modelPath: "assets/hologram/stage/stage.gltf",
              position: vector.Vector3(0.15, 0.122, 0.145),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "objective",
              modelPath: "assets/hologram/objective/objective.gltf",
              position: vector.Vector3(0.12, 0.155, 0.175),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
            SceneNode(
              name: "nose",
              modelPath: "assets/hologram/nose/nose.gltf",
              position: vector.Vector3(-0.025, 0.195, 0.175),
              scale: vector.Vector3(1.0, 1.0, 1.0),
            ),
          ];

          List<String> definitions = [
            'The base is the bottom support of the microscope, used to stabilize the instrument.',
            'The arm supports the tube and connects it to the base.',
            'The fine adjustment knob is used to focus the microscope for clearer image details.',
            'The coarse adjustment knob is used for focusing the microscope on low power.',
            'The eyepiece is where you look into the microscope to see the magnified image of the specimen.',
            'The diaphragm controls the amount of light reaching the specimen.',
            'The stage is where the specimen is placed for viewing.',
            'The objective lens is the primary optical lens on a microscope.',
            'The nosepiece holds the objective lenses and allows you to switch between them.'
          ];

          for (int i = 0; i < sceneNodes.length; i++) {
            var newNode = ARNode(
              type: NodeType.localGLTF2,
              uri: sceneNodes[i].modelPath,
              scale: vector.Vector3(
                  1.0, 1.0, 1.0), // Adjust scale to make models larger
              position: vector.Vector3(
                translation.x + sceneNodes[i].position.x,
                translation.y + sceneNodes[i].position.y,
                translation.z + sceneNodes[i].position.z,
              ),
              rotation: vector.Vector4(
                  0, 1, 0, 6.2832), // Rotate 360 degrees around Y-axis
              name: sceneNodes[i].name,
              canScale: false, // Ensure models cannot be pinched
            );

            arObjectManager.addNode(newNode).then((didAddNode) {
              if (didAddNode!) {
                nodes.add(newNode);
                if (i == sceneNodes.length - 1) {
                  setState(() {
                    modelPlaced = true;
                  });
                  this.arObjectManager!.onNodeTap = (tappedNodes) {
                    if (explorationMode) {
                      tappedNodes.forEach((nodeName) {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                        }
                      });
                    } else {
                      tappedNodes.forEach((nodeName) {
                        if (currentQuestionIndex == 0 && nodeName == "base") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 1 &&
                            nodeName == "arm") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 2 &&
                            nodeName == "fine") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 3 &&
                            nodeName == "coarse") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 4 &&
                            nodeName == "eye") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 5 &&
                            nodeName == "diaphragm") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 6 &&
                            nodeName == "stage") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 7 &&
                            nodeName == "objective") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                            });
                          }
                        } else if (currentQuestionIndex == 8 &&
                            nodeName == "nose") {
                          int index = sceneNodes
                              .indexWhere((node) => node.name == nodeName);
                          if (index != -1) {
                            _showDefinition(context, definitions[index]);
                            setState(() {
                              currentQuestionIndex++;
                              if (currentQuestionIndex == questions.length) {
                                setState(() {
                                  explorationMode = true;
                                });
                              }
                            });
                          }
                        }
                      });
                    }
                  };
                }
              } else {
                arSessionManager.onError("Failed to add model.");
              }
            }).catchError((error) {
              arSessionManager.onError("Failed to add model: $error");
            });
          }
        }
      }
    };
  }

  void _showDefinition(BuildContext context, String definition) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Definition'),
          content: Text(definition),
          actions: <Widget>[
            TextButton(
              child: Text('Close'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}
