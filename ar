import 'package:flutter/material.dart';
import 'package:ar_flutter_plugin/ar_flutter_plugin.dart';
import 'package:ar_flutter_plugin/datatypes/config_planedetection.dart';
import 'package:ar_flutter_plugin/managers/ar_anchor_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_object_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_session_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_location_manager.dart';
import 'package:ar_flutter_plugin/models/ar_node.dart';
import 'package:ar_flutter_plugin/datatypes/node_types.dart';
import 'package:ar_flutter_plugin/models/ar_hittest_result.dart';
import 'package:ar_flutter_plugin/datatypes/hittest_result_types.dart';
import 'package:vector_math/vector_math_64.dart' as vector;

void main() {
  runApp(MaterialApp(home: ModuleScreen()));
}

class ModuleScreen extends StatefulWidget {
  const ModuleScreen({super.key});

  @override
  _ModuleScreenPage createState() => _ModuleScreenPage();
}

class _ModuleScreenPage extends State<ModuleScreen> {
  ARSessionManager? arSessionManager;
  ARObjectManager? arObjectManager;
  ARAnchorManager? arAnchorManager;
  ARLocationManager? arLocationManager;

  bool surfaceDetected = false;
  bool modelPlaced = false;
  bool showPlanes = true;
  bool showQuestion = false;
  bool showSuccessMessage = false;
  bool showNewModel = false;
  int wrongAnswers = 0;
  int correctAnswers = 0;
  ARNode? placedNode;

  @override
  void dispose() {
    super.dispose();
    arSessionManager?.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: const Center(
          child: Text(
            'AR Surface Detection',
            style: TextStyle(color: Colors.black),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      body: Stack(
        children: [
          ARView(
            onARViewCreated: onARViewCreated,
            planeDetectionConfig: PlaneDetectionConfig.horizontalAndVertical,
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Icon(Icons.camera, size: 100, color: Colors.white),
                SizedBox(height: 20),
                if (!surfaceDetected)
                  Text(
                    'Scan the surface and tap to start',
                    style: TextStyle(
                      fontSize: 24,
                      color: Colors.white,
                      backgroundColor: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
                if (surfaceDetected && !modelPlaced)
                  Text(
                    'Tap the screen to place the model',
                    style: TextStyle(
                      fontSize: 24,
                      color: Colors.white,
                      backgroundColor: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
              ],
            ),
          ),
          if (modelPlaced && !showQuestion && !showSuccessMessage && !showNewModel)
            Positioned(
              bottom: 100,
              left: 0,
              right: 0,
              child: Column(
                children: [
                  Text(
                    "Here is the model!",
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.white,
                      backgroundColor: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        showQuestion = true;
                      });
                    },
                    child: Text('Continue'),
                  ),
                ],
              ),
            ),
          if (showQuestion)
            Positioned(
              bottom: 100,
              left: 0,
              right: 0,
              child: Column(
                children: [
                  Text(
                    "But first, can you answer this question?\nWhat part of the microscope is used to support it?",
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.white,
                      backgroundColor: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        wrongAnswers += 1;
                      });
                    },
                    child: Text('Condenser'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        correctAnswers += 1;
                        showQuestion = false;
                        showSuccessMessage = true;
                      });
                    },
                    child: Text('Base'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        wrongAnswers += 1;
                      });
                    },
                    child: Text('Stage'),
                  ),
                ],
              ),
            ),
          if (showSuccessMessage)
            Positioned(
              bottom: 100,
              left: 0,
              right: 0,
              child: Column(
                children: [
                  Text(
                    "Great job! Are you ready to explore the base?",
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.white,
                      backgroundColor: Colors.black54,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        showSuccessMessage = false;
                        modelPlaced = false;
                        showNewModel = true;
                        // Remove the previous node
                        if (placedNode != null) {
                          arObjectManager!.removeNode(placedNode!);
                          placedNode = null;
                        }
                      });
                    },
                    child: Text('Continue'),
                  ),
                ],
              ),
            ),
          if (showNewModel && modelPlaced)
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                color: Colors.black54,
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      ElevatedButton(
                        onPressed: () {
                          // Handle button 1 press
                        },
                        child: Text('Button 1'),
                      ),
                      SizedBox(width: 10),
                      ElevatedButton(
                        onPressed: () {
                          // Handle button 2 press
                        },
                        child: Text('Button 2'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          Positioned(
            top: 40,
            left: 20,
            child: Text(
              'Wrong: $wrongAnswers  Correct: $correctAnswers',
              style: TextStyle(color: Colors.white),
            ),
          ),
          Positioned(
            top: 40,
            right: 20,
            child: IconButton(
              icon: Icon(showPlanes ? Icons.visibility : Icons.visibility_off),
              color: Colors.white,
              onPressed: () {
                setState(() {
                  showPlanes = !showPlanes;
                  if (arSessionManager != null) {
                    arSessionManager!.onInitialize(
                      showFeaturePoints: false,
                      showPlanes: showPlanes,
                      showWorldOrigin: false,
                      handlePans: false,
                      handleScale: false,
                    );
                  }
                });
              },
            ),
          ),
        ],
      ),
    );
  }

  void onARViewCreated(
      ARSessionManager arSessionManager,
      ARObjectManager arObjectManager,
      ARAnchorManager arAnchorManager,
      ARLocationManager arLocationManager,
      ) {
    this.arSessionManager = arSessionManager;
    this.arObjectManager = arObjectManager;
    this.arAnchorManager = arAnchorManager;
    this.arLocationManager = arLocationManager;

    print("ARView created");

    this.arSessionManager!.onInitialize(
      showFeaturePoints: true,
      showPlanes: true,
      showWorldOrigin: false,
      handlePans: false,
      handleScale: false,
    );
    this.arObjectManager!.onInitialize();

    this.arSessionManager!.onPlaneOrPointTap = (List<ARHitTestResult> hitTestResults) {
      print("Plane or point tapped");

      if (!surfaceDetected) {
        setState(() {
          surfaceDetected = true;
        });
      } else if (!modelPlaced) {
        ARHitTestResult? singleHitTestResult;
        try {
          singleHitTestResult = hitTestResults.firstWhere(
                (hitTestResult) => hitTestResult.type == ARHitTestResultType.plane,
          );
        } catch (e) {
          singleHitTestResult = null;
        }

        if (singleHitTestResult != null) {
          print("Hit test result found: $singleHitTestResult");
          // Extract the translation and rotation from the hit test result
          var translation = singleHitTestResult.worldTransform.getTranslation();
          var rotation = singleHitTestResult.worldTransform.getRotation();
          var rotationQuaternion = vector.Quaternion.fromRotation(rotation);

          // Create and add a 3D node at the tap location
          var newNode = ARNode(
            type: NodeType.localGLTF2,
            uri: showNewModel
                ? "assets/lesson1&2/assets/lenses/4x/4x.gltf"
                : "assets/lesson1&2/assets/lens/lens.gltf",
            scale: vector.Vector3(0.1, 0.1, 0.1),
            position: translation,
            rotation: vector.Vector4(
              rotationQuaternion.x,
              rotationQuaternion.y,
              rotationQuaternion.z,
              rotationQuaternion.w,
            ),
          );

          print("Adding 3D node: $newNode");

          arObjectManager.addNode(newNode).then((didAddNode) {
            if (didAddNode!) {
              print("3D model added to the scene.");
              setState(() {
                modelPlaced = true;
                placedNode = newNode;
                // Turn off plane detection when the model is placed
                if (arSessionManager != null) {
                  arSessionManager!.onInitialize(
                    showFeaturePoints: false,
                    showPlanes: false,
                    showWorldOrigin: false,
                    handlePans: false,
                    handleScale: false,
                  );
                }
              });
            } else {
              arSessionManager.onError("Failed to add 3D model.");
            }
          }).catchError((error) {
            print("Error adding 3D node: $error");
            arSessionManager.onError("Failed to add 3D model: $error");
          });
        } else {
          print("No hit test result found.");
        }
      }
    };
  }
}

class InstructionsDialog extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Instructions: Move your camera until white dots appear on the screen. These dots indicate detected surfaces. Once a surface is detected, tap on it to start.',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            Align(
              alignment: Alignment.center,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('Close'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
