import 'package:flutter/material.dart';
import 'package:ar_flutter_plugin/ar_flutter_plugin.dart';
import 'package:ar_flutter_plugin/datatypes/config_planedetection.dart';
import 'package:ar_flutter_plugin/managers/ar_anchor_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_object_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_session_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_location_manager.dart';
import 'package:ar_flutter_plugin/models/ar_node.dart';
import 'package:ar_flutter_plugin/datatypes/node_types.dart';
import 'package:ar_flutter_plugin/models/ar_hittest_result.dart';
import 'package:ar_flutter_plugin/datatypes/hittest_result_types.dart';
import 'package:vector_math/vector_math_64.dart' as vector;

void main() {
  runApp(MaterialApp(home: ModuleScreen()));
}

class ModuleScreen extends StatefulWidget {
  @override
  _ModuleScreenPage createState() => _ModuleScreenPage();
}

class _ModuleScreenPage extends State<ModuleScreen> {
  ARSessionManager? arSessionManager;
  ARObjectManager? arObjectManager;
  ARAnchorManager? arAnchorManager;
  ARLocationManager? arLocationManager;
  bool surfaceDetected = false;
  bool modelPlaced = false;

  @override
  void dispose() {
    super.dispose();
    arSessionManager?.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: const Center(
          child: Text(
            'AR Surface Detection',
            style: TextStyle(color: Colors.black),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      body: Stack(
        children: [
          ARView(
            onARViewCreated: onARViewCreated,
            planeDetectionConfig: PlaneDetectionConfig.horizontalAndVertical,
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                if (!surfaceDetected)
                  Column(
                    children: [
                      Icon(Icons.camera, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Scan the surface and tap to start',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                          backgroundColor: Colors.black54,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                if (surfaceDetected && !modelPlaced)
                  Column(
                    children: [
                      Icon(Icons.touch_app, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Tap the screen to place the model',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                          backgroundColor: Colors.black54,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void onARViewCreated(
    ARSessionManager arSessionManager,
    ARObjectManager arObjectManager,
    ARAnchorManager arAnchorManager,
    ARLocationManager arLocationManager,
  ) {
    this.arSessionManager = arSessionManager;
    this.arObjectManager = arObjectManager;
    this.arAnchorManager = arAnchorManager;
    this.arLocationManager = arLocationManager;

    this.arSessionManager!.onInitialize(
      showFeaturePoints: true,
      showPlanes: true,
      showWorldOrigin: false,
      handlePans: false, // Disable dragging
      handleScale: true, // Enable zooming
    );
    this.arObjectManager!.onInitialize();

    this.arSessionManager!.onPlaneOrPointTap =
        (List<ARHitTestResult> hitTestResults) {
      if (!surfaceDetected) {
        setState(() {
          surfaceDetected = true;
        });
      } else if (!modelPlaced) {
        ARHitTestResult? singleHitTestResult;
        try {
          singleHitTestResult = hitTestResults.firstWhere(
            (hitTestResult) => hitTestResult.type == ARHitTestResultType.plane,
          );
        } catch (e) {
          singleHitTestResult = null;
        }

        if (singleHitTestResult != null) {
          var translation = singleHitTestResult.worldTransform.getTranslation();
          var rotation = singleHitTestResult.worldTransform.getRotation();
          var rotationQuaternion = vector.Quaternion.fromRotation(rotation);

          var baseNode = ARNode(
            type: NodeType.localGLTF2,
            uri: "assets/hologram/base/hbase.gltf",
            scale: vector.Vector3(0.1, 0.1, 0.1),
            position: translation,
            rotation: vector.Vector4(
              rotationQuaternion.x,
              rotationQuaternion.y,
              rotationQuaternion.z,
              rotationQuaternion.w,
            ),
          );

          arObjectManager.addNode(baseNode).then((didAddBaseNode) {
            if (didAddBaseNode!) {
              var armNode = ARNode(
                type: NodeType.localGLTF2,
                uri: "assets/hologram/arm/harm.gltf",
                scale: vector.Vector3(0.1, 0.1, 0.1),
                position: vector.Vector3(
                    translation.x, translation.y + 0.1, translation.z),
                rotation: vector.Vector4(
                  rotationQuaternion.x,
                  rotationQuaternion.y,
                  rotationQuaternion.z,
                  rotationQuaternion.w,
                ),
              );

              arObjectManager.addNode(armNode).then((didAddArmNode) {
                if (didAddArmNode!) {
                  setState(() {
                    modelPlaced = true;
                  });
                  this.arObjectManager!.onNodeTap = (nodes) {
                    nodes.forEach((nodeName) {
                      if (nodeName == baseNode.name) {
                        _showBaseDefinition(context);
                      }
                    });
                  };
                } else {
                  arSessionManager.onError("Failed to add arm model.");
                }
              }).catchError((error) {
                arSessionManager.onError("Failed to add arm model: $error");
              });
            } else {
              arSessionManager.onError("Failed to add base model.");
            }
          }).catchError((error) {
            arSessionManager.onError("Failed to add base model: $error");
          });
        }
      }
    };
  }

  void _showBaseDefinition(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Base Definition'),
          content: Text('The base is the bottom support of the microscope, used to stabilize the instrument.'),
          actions: <Widget>[
            TextButton(
              child: Text('Close'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}
