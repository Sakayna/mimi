import 'package:flutter/material.dart';
import 'package:ar_flutter_plugin/ar_flutter_plugin.dart';
import 'package:ar_flutter_plugin/datatypes/config_planedetection.dart';
import 'package:ar_flutter_plugin/managers/ar_anchor_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_object_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_session_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_location_manager.dart';
import 'package:ar_flutter_plugin/models/ar_node.dart';
import 'package:ar_flutter_plugin/datatypes/node_types.dart';
import 'package:ar_flutter_plugin/models/ar_hittest_result.dart';
import 'package:ar_flutter_plugin/datatypes/hittest_result_types.dart';
import 'package:vector_math/vector_math_64.dart' as vector;

void main() {
  runApp(MaterialApp(home: ModuleScreen2()));
}

class SceneNode {
  final String name;
  final String modelPath;
  final vector.Vector3 position;
  final vector.Vector3 scale;

  SceneNode({
    required this.name,
    required this.modelPath,
    required this.position,
    required this.scale,
  });
}

class ModuleScreen2 extends StatefulWidget {
  @override
  _ModuleScreen2Page createState() => _ModuleScreen2Page();
}

class _ModuleScreen2Page extends State<ModuleScreen2> {
  ARSessionManager? arSessionManager;
  ARObjectManager? arObjectManager;
  ARAnchorManager? arAnchorManager;
  ARLocationManager? arLocationManager;
  bool surfaceDetected = false;
  bool modelPlaced = false;
  List<ARNode> nodes = [];
  int correctAnswers = 0;
  int incorrectAnswers = 0;
  int currentQuestionIndex = 0;
  List<bool> unlockedButtons = List<bool>.filled(10, false);

  List<String> questions = [
    "Which part is the base? Tap to answer.",
    "Which part is the arm? Tap to answer.",
    "Which part is the fine focus? Tap to answer.",
    "Which part is the coarse focus? Tap to answer.",
    "Which part is the eyepiece? Tap to answer.",
    "Which part is the diaphragm? Tap to answer.",
    "Which part is the stage? Tap to answer.",
    "Which part are the objective lenses? Tap to answer.",
    "Which part is the nosepiece? Tap to answer.",
    "Which part is the illuminator? Tap to answer.",
  ];

  List<String> definitions = [
    'The base is the bottom support of the microscope, used to stabilize the instrument.',
    'The arm supports the tube and connects it to the base.',
    'The fine adjustment knob is used to focus the microscope for clearer image details.',
    'The coarse adjustment knob is used for focusing the microscope on low power.',
    'The eyepiece is where you look into the microscope to see the magnified image of the specimen.',
    'The diaphragm controls the amount of light reaching the specimen.',
    'The stage is where the specimen is placed for viewing.',
    'The objective lens is the primary optical lens on a microscope.',
    'The nosepiece holds the objective lenses and allows you to switch between them.',
    'The illuminator provides the light source for the microscope.'
  ];

  @override
  void dispose() {
    super.dispose();
    arSessionManager?.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: const Center(
          child: Text(
            'AR Surface Detection',
            style: TextStyle(color: Colors.black),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      body: Stack(
        children: [
          ARView(
            onARViewCreated: onARViewCreated,
            planeDetectionConfig: PlaneDetectionConfig.horizontalAndVertical,
          ),
          Positioned(
            top: 16,
            left: 16,
            child: Text(
              'Wrong: $incorrectAnswers   Correct: $correctAnswers',
              style: const TextStyle(
                fontSize: 20,
                color: Colors.white,
              ),
            ),
          ),
          if (modelPlaced)
            Positioned(
              bottom: 16,
              left: 16,
              right: 16,
              child: Container(
                color: Colors.black54,
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  questions[currentQuestionIndex],
                  style: TextStyle(
                    fontSize: 20,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              color: Colors.black54,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  children: List.generate(10, (index) {
                    return Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Column(
                        children: [
                          ElevatedButton(
                            onPressed: unlockedButtons[index]
                                ? () {
                                    _showDefinition(context, definitions[index]);
                                  }
                                : null,
                            style: ElevatedButton.styleFrom(
                              shape: CircleBorder(),
                              padding: EdgeInsets.all(10),
                              backgroundColor: Colors.white,
                            ),
                            child: unlockedButtons[index]
                                ? Image.asset(
                                    index == 0
                                        ? 'assets/lesson1&2/assets/base/base.png'
                                        : index == 1
                                            ? 'assets/lesson1&2/assets/fine/fine.png'
                                            : index == 2
                                                ? 'assets/lesson1&2/assets/coarse/coarse.png'
                                                : index == 3
                                                    ? 'assets/lesson1&2/assets/arm/arm.png'
                                                    : index == 4
                                                        ? 'assets/lesson1&2/assets/eye/eye.png'
                                                        : index == 5
                                                            ? 'assets/lesson1&2/assets/diaphragm/diaphragm.png'
                                                            : index == 6
                                                                ? 'assets/lesson1&2/assets/stage/stage.png'
                                                                : index == 7
                                                                    ? 'assets/lesson1&2/assets/objective/objective.png'
                                                                    : index ==
                                                                            8
                                                                        ? 'assets/lesson1&2/assets/nose/nose.png'
                                                                        : 'assets/lesson1&2/assets/illuminator/illuminator.png',
                                    fit: BoxFit.cover,
                                    width: 40,
                                    height: 40,
                                  )
                                : Icon(Icons.help_outline, size: 40),
                          ),
                          if (unlockedButtons[index])
                            Text(
                              index == 0
                                  ? 'Base'
                                  : index == 1
                                      ? 'Fine Focus'
                                      : index == 2
                                          ? 'Coarse Focus'
                                          : index == 3
                                              ? 'Arm'
                                              : index == 4
                                                  ? 'Eyepiece'
                                                  : index == 5
                                                      ? 'Diaphragm'
                                                      : index == 6
                                                          ? 'Stage'
                                                          : index == 7
                                                              ? 'Objective'
                                                              : index == 8
                                                                  ? 'Nosepiece'
                                                                  : 'Illuminator',
                              style: TextStyle(color: Colors.white),
                            ),
                        ],
                      ),
                    );
                  }),
                ),
              ),
            ),
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                if (!surfaceDetected)
                  Column(
                    children: [
                      Icon(Icons.camera, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Scan the surface and tap to start',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                if (surfaceDetected && !modelPlaced)
                  Column(
                    children: [
                      Icon(Icons.touch_app, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Tap the screen to place the models',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void onARViewCreated(
    ARSessionManager arSessionManager,
    ARObjectManager arObjectManager,
    ARAnchorManager arAnchorManager,
    ARLocationManager arLocationManager,
  ) {
    this.arSessionManager = arSessionManager;
    this.arObjectManager = arObjectManager;
    this.arAnchorManager = arAnchorManager;
    this.arLocationManager = arLocationManager;

    this.arSessionManager!.onInitialize(
      showFeaturePoints: true,
      showPlanes: true,
      showWorldOrigin: false,
      handlePans: false, // Disable dragging
      handleScale: true, // Enable zooming
    );
    this.arObjectManager!.onInitialize();

    this.arSessionManager!.onPlaneOrPointTap =
        (List<ARHitTestResult> hitTestResults) {
      if (!surfaceDetected) {
        setState(() {
          surfaceDetected = true;
        });
      } else if (!modelPlaced) {
        ARHitTestResult? singleHitTestResult;
        try {
          singleHitTestResult = hitTestResults.firstWhere(
            (hitTestResult) => hitTestResult.type == ARHitTestResultType.plane,
          );
        } catch (e) {
          singleHitTestResult = null;
        }

        if (singleHitTestResult != null) {
          var translation = singleHitTestResult.worldTransform.getTranslation();
          var rotation = singleHitTestResult.worldTransform.getRotation();
          var rotationQuaternion = vector.Quaternion.fromRotation(rotation);

          List<SceneNode> sceneNodes = [
            SceneNode(
              name: "base",
              modelPath: "assets/lesson1&2/assets/base/base.gltf",
              position: vector.Vector3(0.0, 0.0, 0.021216),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "arm",
              modelPath: "assets/lesson1&2/assets/arm/arm.gltf",
              position: vector.Vector3(0.0, 0.0615984, 0.0944339),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "coarse",
              modelPath: "assets/lesson1&2/assets/coarse/coarse.gltf",
              position: vector.Vector3(0.0, 0.0504573, 0.110877),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "fine",
              modelPath: "assets/lesson1&2/assets/fine/fine.gltf",
              position: vector.Vector3(0.0, 0.0283327, 0.0578705),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "eye",
              modelPath: "assets/lesson1&2/assets/eye/eye1.gltf",
              position: vector.Vector3(0.0, -0.0201736, 0.267013),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "diaphragm",
              modelPath: "assets/lesson1&2/assets/diaphragm/diaphragm.gltf",
              position: vector.Vector3(0.0, -0.0180516, 0.135067),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "stage",
              modelPath: "assets/lesson1&2/assets/stage/stage.gltf",
              position: vector.Vector3(0.0, -0.0273007, 0.150221),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "objective",
              modelPath: "assets/hologram/objective/objective.gltf",
              position: vector.Vector3(0.0, -0.0327966, 0.22877),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "nose",
              modelPath: "assets/lesson1&2/assets/nose/nose.gltf",
              position: vector.Vector3(0.0, -0.0327966, 0.22877),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
            SceneNode(
              name: "illuminator",
              modelPath: "assets/hologram/illuminator/illuminator1.gltf",
              position: vector.Vector3(0.125, 0.01, 0.15),
              scale: vector.Vector3(0.1, 0.1, 0.1),
            ),
          ];

          for (int i = 0; i < sceneNodes.length; i++) {
            var newNode = ARNode(
              type: NodeType.localGLTF2,
              uri: sceneNodes[i].modelPath,
              scale: sceneNodes[i].scale,
              position: vector.Vector3(
                translation.x + sceneNodes[i].position.x,
                translation.y + sceneNodes[i].position.y,
                translation.z + sceneNodes[i].position.z,
              ),
              rotation: vector.Vector4(
                rotationQuaternion.x,
                rotationQuaternion.y,
                rotationQuaternion.z,
                rotationQuaternion.w,
              ),
              name: sceneNodes[i].name,
            );

            arObjectManager.addNode(newNode).then((didAddNode) {
              if (didAddNode!) {
                nodes.add(newNode);
                if (i == sceneNodes.length - 1) {
                  setState(() {
                    modelPlaced = true;
                  });
                  this.arObjectManager!.onNodeTap = (tappedNodes) {
                    tappedNodes.forEach((nodeName) {
                      if (currentQuestionIndex == 0 && nodeName == "base") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 1 &&
                          nodeName == "arm") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 2 &&
                          nodeName == "fine") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 3 &&
                          nodeName == "coarse") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 4 &&
                          nodeName == "eye") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 5 &&
                          nodeName == "diaphragm") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 6 &&
                          nodeName == "stage") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 7 &&
                          nodeName == "objective") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 8 &&
                          nodeName == "nose") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else if (currentQuestionIndex == 9 &&
                          nodeName == "illuminator") {
                        int index = sceneNodes
                            .indexWhere((node) => node.name == nodeName);
                        if (index != -1) {
                          _showDefinition(context, definitions[index]);
                          setState(() {
                            correctAnswers++;
                            unlockedButtons[currentQuestionIndex] = true;
                            currentQuestionIndex++;
                          });
                        }
                      } else {
                        setState(() {
                          incorrectAnswers++;
                        });
                      }
                    });
                  };
                }
              } else {
                arSessionManager.onError("Failed to add model.");
              }
            }).catchError((error) {
              arSessionManager.onError("Failed to add model: $error");
            });
          }
        }
      }
    };
  }

  void _showDefinition(BuildContext context, String definition) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Definition'),
          content: Text(definition),
          actions: <Widget>[
            TextButton(
              child: Text('Close'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}
