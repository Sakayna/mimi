import 'package:flutter/material.dart';
import 'package:ar_flutter_plugin/ar_flutter_plugin.dart';
import 'package:ar_flutter_plugin/datatypes/config_planedetection.dart';
import 'package:ar_flutter_plugin/managers/ar_anchor_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_object_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_session_manager.dart';
import 'package:ar_flutter_plugin/managers/ar_location_manager.dart';
import 'package:ar_flutter_plugin/models/ar_node.dart';
import 'package:ar_flutter_plugin/datatypes/node_types.dart';
import 'package:ar_flutter_plugin/models/ar_hittest_result.dart';
import 'package:ar_flutter_plugin/datatypes/hittest_result_types.dart';
import 'package:vector_math/vector_math_64.dart' as vector;

void main() {
  runApp(MaterialApp(home: ModuleScreen()));
}

class ModuleScreen extends StatefulWidget {
  @override
  _ModuleScreenPage createState() => _ModuleScreenPage();
}

class _ModuleScreenPage extends State<ModuleScreen> {
  ARSessionManager? arSessionManager;
  ARObjectManager? arObjectManager;
  ARAnchorManager? arAnchorManager;
  ARLocationManager? arLocationManager;
  bool surfaceDetected = false;
  bool modelPlaced = false;
  List<ARNode> nodes = [];

  @override
  void dispose() {
    super.dispose();
    arSessionManager?.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        title: const Center(
          child: Text(
            'AR Surface Detection',
            style: TextStyle(color: Colors.black),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      body: Stack(
        children: [
          ARView(
            onARViewCreated: onARViewCreated,
            planeDetectionConfig: PlaneDetectionConfig.horizontalAndVertical,
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                if (!surfaceDetected)
                  Column(
                    children: [
                      Icon(Icons.camera, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Scan the surface and tap to start',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                          backgroundColor: Colors.black54,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                if (surfaceDetected && !modelPlaced)
                  Column(
                    children: [
                      Icon(Icons.touch_app, size: 100, color: Colors.white),
                      SizedBox(height: 20),
                      Text(
                        'Tap the screen to place the models',
                        style: TextStyle(
                          fontSize: 24,
                          color: Colors.white,
                          backgroundColor: Colors.black54,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void onARViewCreated(
    ARSessionManager arSessionManager,
    ARObjectManager arObjectManager,
    ARAnchorManager arAnchorManager,
    ARLocationManager arLocationManager,
  ) {
    this.arSessionManager = arSessionManager;
    this.arObjectManager = arObjectManager;
    this.arAnchorManager = arAnchorManager;
    this.arLocationManager = arLocationManager;

    this.arSessionManager!.onInitialize(
          showFeaturePoints: true,
          showPlanes: true,
          showWorldOrigin: false,
          handlePans: false, // Disable dragging
          handleScale: true, // Enable zooming
        );
    this.arObjectManager!.onInitialize();

    this.arSessionManager!.onPlaneOrPointTap =
        (List<ARHitTestResult> hitTestResults) {
      if (!surfaceDetected) {
        setState(() {
          surfaceDetected = true;
        });
      } else if (!modelPlaced) {
        ARHitTestResult? singleHitTestResult;
        try {
          singleHitTestResult = hitTestResults.firstWhere(
            (hitTestResult) => hitTestResult.type == ARHitTestResultType.plane,
          );
        } catch (e) {
          singleHitTestResult = null;
        }

        if (singleHitTestResult != null) {
          var translation = singleHitTestResult.worldTransform.getTranslation();
          var rotation = singleHitTestResult.worldTransform.getRotation();
          var rotationQuaternion = vector.Quaternion.fromRotation(rotation);

          List<String> uris = [
            "assets/lesson1&2/assets/base/base.gltf",
            "assets/lesson1&2/assets/arm/arm.gltf",
            "assets/lesson1&2/assets/fine/fine.gltf",
            "assets/lesson1&2/assets/coarse/coarse.gltf",
            "assets/lesson1&2/assets/eye/eye1.gltf",
            "assets/lesson1&2/assets/lamp/lamp.gltf",
            "assets/lesson1&2/assets/diaphragm/diaphragm.gltf",
            "assets/lesson1&2/assets/stage/stage.gltf",
            "assets/lesson1&2/assets/objective/objective1.gltf",
            "assets/lesson1&2/assets/nose/nose.gltf"
          ];

          List<String> names = [
            "base",
            "arm",
            "fine",
            "coarse",
            "eye",
            "lamp",
            "diaphragm",
            "stage",
            "objective",
            "nose"
          ];

          List<String> definitions = [
            'The base is the bottom support of the microscope, used to stabilize the instrument.',
            'The arm supports the tube and connects it to the base.',
            'The fine adjustment knob is used to focus the microscope.',
            'The coarse adjustment knob is used for focusing the microscope on low power.',
            'The eyepiece is where you look into the microscope to see the magnified image of the specimen.',
            'The lamp provides the light source for the microscope.',
            'The diaphragm controls the amount of light reaching the specimen.',
            'The stage is where the specimen is placed for viewing.',
            'The objective lens is the primary optical lens on a microscope.',
            'The nosepiece holds the objective lenses and allows you to switch between them.'
          ];

          for (int i = 0; i < uris.length; i++) {
            var newNode = ARNode(
              type: NodeType.localGLTF2,
              uri: uris[i],
              scale: vector.Vector3(0.1, 0.1, 0.1),
              position: vector.Vector3(
                translation.x + (i % 3) * 0.2,
                translation.y,
                translation.z + (i ~/ 3) * 0.2,
              ),
              rotation: vector.Vector4(
                rotationQuaternion.x,
                rotationQuaternion.y,
                rotationQuaternion.z,
                rotationQuaternion.w,
              ),
              name: names[i],
            );

            arObjectManager.addNode(newNode).then((didAddNode) {
              if (didAddNode!) {
                nodes.add(newNode);
                if (i == uris.length - 1) {
                  setState(() {
                    modelPlaced = true;
                  });
                  this.arObjectManager!.onNodeTap = (tappedNodes) {
                    tappedNodes.forEach((nodeName) {
                      int index = names.indexOf(nodeName);
                      if (index != -1) {
                        _showDefinition(context, definitions[index]);
                      }
                    });
                  };
                }
              } else {
                arSessionManager.onError("Failed to add model.");
              }
            }).catchError((error) {
              arSessionManager.onError("Failed to add model: $error");
            });
          }
        }
      }
    };
  }

  void _showDefinition(BuildContext context, String definition) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Definition'),
          content: Text(definition),
          actions: <Widget>[
            TextButton(
              child: Text('Close'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
}
