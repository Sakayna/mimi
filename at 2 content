import 'package:capstone/helpers/fisher_yates.dart';
import 'package:flutter/material.dart';
import 'Microscopy_AT_Quiz_2_Items.dart' as quizItemsFile;
import 'Microscopy_AT_Quiz_2_Score.dart';
import 'package:provider/provider.dart';
import 'package:capstone/globals/global_variables_notifier.dart';

void main() {
  runApp(MaterialApp(
    home: Microscopy_AT_Quiz_2_Content(),
  ));
}

class Microscopy_AT_Quiz_2_Content extends StatefulWidget {
  @override
  _Microscopy_AT_Quiz_2_ContentState createState() =>
      _Microscopy_AT_Quiz_2_ContentState();
}

class _Microscopy_AT_Quiz_2_ContentState
    extends State<Microscopy_AT_Quiz_2_Content> {
  final List<quizItemsFile.QuizItemContent> quizItems = [
    quizItemsFile.QuizItemContent(
      question:
      'A hollow tube through which light passes and holds the lenses apart. It also separates the objective and the eyepiece, ensuring that optics remain continuously aligned.',
      answer: 'eye piece',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'The round part that holds the OBJECTIVE LENSES apart. It also known as the rotating nosepiece or turret, is the portion of a microscope that houses the objective lenses and may be rotated to produce different degrees of magnification.',
      answer: 'nose piece',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'A lens that might be high power and low power objective that magnifies the specimen and is used to examine specimens.',
      answer: 'objective lenses',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'It holds down the slide on the stage. The microscope _____ are little metal clips that are situated slightly above the stage and used to hold the object or specimen slides in place while being observed.',
      answer: 'stage clips',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Place where the object you are looking at is placed (Specimen). It is also the microscope the platform on which the specimen, which is normally mounted on a glass slide, is seen.',
      answer: 'stage',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Changes the amount of light reaching the objective lenses. Located under the Stage.',
      answer: 'diaphragm',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Located beneath the Stage and Diaphragm. It sends light towards the hole in the stage.',
      answer: 'illuminator',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'It is the lens you look through that magnifies the specimen. It is also known as the ocular lens, the component of the microscope that magnifies the picture generated by the objective such that it can be viewed with the naked eye',
      answer: 'eyepiece',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Supports the body tube and is used to carry the microscope. It links the microscope\'s head to the base.',
      answer: 'arm',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Microscope\'s rough focus knob, which allows for speedy focusing by moving the objective lens or stage up and down.',
      answer: 'coarse adjustment',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Raises and lowers the Body Tube and is used to bring objects into focus. It is used to fine-tune the focus of the specimen to provide ideal clarity and detail after it has been brought into focus with the coarse focus knob.',
      answer: 'fine focus',
    ),
    quizItemsFile.QuizItemContent(
      question:
      'Bottom part of the microscope that is often shaped like a horseshoe and provides support and stability to the device.',
      answer: 'base',
    ),
  ];

  final answerController = TextEditingController();
  int currentQuestionIndex = 0;
  Map<int, String> userAnswers = {};
  bool isAnswerEmpty = true;

  @override
  void initState() {
    super.initState();
    FisherYates.shuffleList(quizItems);
  }

  @override
  void dispose() {
    answerController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    var globalVariables = Provider.of<GlobalVariables>(context);

    if (userAnswers.containsKey(currentQuestionIndex)) {
      answerController.text = userAnswers[currentQuestionIndex] ?? '';
      isAnswerEmpty = answerController.text.isEmpty;
    } else {
      answerController.clear();
      isAnswerEmpty = true;
    }

    return WillPopScope(
      onWillPop: () async {
        if (currentQuestionIndex == 0) {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AlertDialog(
                title: Text('Warning'),
                content: Text('You cannot go back after starting the quiz.'),
                actions: <Widget>[
                  TextButton(
                    child: Text('OK'),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                ],
              );
            },
          );
          return false;
        } else {
          setState(() {
            currentQuestionIndex--;
            isAnswerEmpty =
            (userAnswers[currentQuestionIndex]?.isEmpty ?? true);
          });
          return false;
        }
      },
      child: Scaffold(
        body: CustomScrollView(
          slivers: [
            SliverAppBar(
              backgroundColor: Color(0xFFFFA551),
              pinned: true,
              expandedHeight: 120.0,
              flexibleSpace: Padding(
                padding: const EdgeInsets.only(
                  top: 10,
                  left: 50,
                  right: 10,
                  bottom: 16,
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Text(
                      'Microscopy',
                      style: TextStyle(
                        fontSize: 12.0,
                        fontWeight: FontWeight.normal,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(height: 5),
                    Text(
                      'Assessment Task',
                      style: TextStyle(
                        fontSize: 12.0,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(height: 5),
                    Text(
                      'Quiz 2: ',
                      style: TextStyle(
                        fontSize: 12.0,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
              leading: Padding(
                padding: const EdgeInsets.only(
                  top: 20,
                ),
                child: IconButton(
                  icon: Icon(Icons.arrow_back_ios),
                  color: Colors.white,
                  onPressed: () {
                    if (currentQuestionIndex == 0) {
                      showDialog(
                        context: context,
                        builder: (BuildContext context) {
                          return AlertDialog(
                            title: Text('Warning'),
                            content: Text(
                                'You cannot go back after starting the quiz.'),
                            actions: <Widget>[
                              TextButton(
                                child: Text('OK'),
                                onPressed: () {
                                  Navigator.of(context).pop();
                                },
                              ),
                            ],
                          );
                        },
                      );
                    } else {
                      setState(() {
                        currentQuestionIndex--;
                        isAnswerEmpty =
                        (userAnswers[currentQuestionIndex]?.isEmpty ??
                            true);
                      });
                    }
                  },
                ),
              ),
            ),
            SliverToBoxAdapter(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding: const EdgeInsets.fromLTRB(20.0, 20.0, 40.0, 0.0),
                      child: Column(
                        children: [
                          Text(
                            'Instructions: Identify the part of the microscope based on the given functions of it.',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 10.0),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 20.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Padding(
                            padding: const EdgeInsets.only(top: 16.0),
                            child: Text(
                              'Question ${currentQuestionIndex + 1}:',
                              style: TextStyle(fontSize: 16),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.fromLTRB(
                                16.0, 16.0, 16.0, 16.0),
                            child: Text(
                              quizItems[currentQuestionIndex].question,
                              style: TextStyle(fontSize: 14),
                            ),
                          ),
                          Padding(
                            padding:
                            const EdgeInsets.symmetric(horizontal: 16.0),
                            child: TextField(
                              controller: answerController,
                              onChanged: (answer) {
                                setState(() {
                                  userAnswers[currentQuestionIndex] = answer;
                                  isAnswerEmpty = answer.isEmpty;
                                });
                              },
                              decoration: InputDecoration(
                                hintText: 'Enter your answer',
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Padding(
                          padding:
                          const EdgeInsets.only(right: 20.0, top: 20.0),
                          child: ElevatedButton(
                            onPressed: () {
                              if (isAnswerEmpty) {
                                showDialog(
                                  context: context,
                                  builder: (BuildContext context) {
                                    return AlertDialog(
                                      title: Text('Error'),
                                      content: Text('Answer is required'),
                                      actions: <Widget>[
                                        TextButton(
                                          child: Text('OK'),
                                          onPressed: () {
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                      ],
                                    );
                                  },
                                );
                              } else {
                                if (currentQuestionIndex <
                                    quizItems.length - 1) {
                                  setState(() {
                                    currentQuestionIndex++;
                                    isAnswerEmpty = !userAnswers
                                        .containsKey(currentQuestionIndex + 1);
                                  });
                                } else {
                                  debugPrint('Submit button clicked');
                                  globalVariables.setQuizTaken('lesson1', 2, true);
                                  globalVariables.unlockNextLesson('lesson1');

                                  debugPrint(
                                      'Navigating to Microscopy_AT_Quiz_2_Score page');
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) =>
                                          Microscopy_AT_Quiz_2_Score(
                                            totalQuestions: quizItems.length,
                                            correctAnswers: 0,
                                            quizItems: quizItems,
                                            userAnswers: userAnswers,
                                          ),
                                    ),
                                  );
                                }
                              }
                            },
                            style: ButtonStyle(
                              backgroundColor:
                              MaterialStateProperty.all(Colors.white),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 20.0),
                              child: Text(
                                  currentQuestionIndex < quizItems.length - 1
                                      ? 'Next'
                                      : 'Submit',
                                  style: TextStyle(
                                    color: Colors.black,
                                  )),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
